{
  "api/Hse.EviFluor.AutoGainResult.html": {
    "href": "api/Hse.EviFluor.AutoGainResult.html",
    "title": "Class AutoGainResult | eviFluor",
    "summary": "Class AutoGainResult Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents the result of an automatic gain adjustment operation. public class AutoGainResult Inheritance object AutoGainResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AutoGainResult(bool, int) Initializes a new instance of the AutoGainResult class. public AutoGainResult(bool found, int ledPower) Parameters found bool Indicates if the gain setting was successfully found. ledPower int The LED power level used. Properties Found Indicates whether the optimal gain setting was found. public bool Found { get; set; } Property Value bool LedPower The LED power level determined during the auto-gain adjustment. public int LedPower { get; set; } Property Value int Methods ToString() Returns a string representation of the auto-gain result. public override string ToString() Returns string A formatted string displaying the gain result."
  },
  "api/Hse.EviFluor.Channel.html": {
    "href": "api/Hse.EviFluor.Channel.html",
    "title": "Class Channel | eviFluor",
    "summary": "Class Channel Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents a measurement channel with sample and reference values, measured in mV. public class Channel Inheritance object Channel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Channel(double, double, int) Initializes a new instance of the Channel class with optional dark and value values. public Channel(double dark = 0, double value = 0, int ledPower = 0) Parameters dark double The dark value in mV (default: 0.0). value double The value in mV (default: 0.0). ledPower int The led power, no unit, range 0..255 (default: 0). Properties Dark Gets or sets the dark value in mV. public double Dark { get; set; } Property Value double LedPower Gets or sets the led power. No unit, range 0..255.. public int LedPower { get; set; } Property Value int Value Gets or sets the value in mV. public double Value { get; set; } Property Value double Methods Delta() Calculates the difference between value and dark. public double Delta() Returns double difference in mV FromJson(JsonNode) Creates a Channel instance from a JSON node. public static Channel FromJson(JsonNode node) Parameters node JsonNode The JSON node containing the channel data. Returns Channel A new Channel instance with values extracted from the JSON node. Exceptions ArgumentException Thrown when the JSON node is invalid. ToJson() Converts the channel values to a JSON representation. public JsonNode ToJson() Returns JsonNode A JsonNode representing the channel values. ToString() Returns a string representation of the channel values. public override string ToString() Returns string A string in the format \"Sample: [value] Reference: [value]\"."
  },
  "api/Hse.EviFluor.Device.html": {
    "href": "api/Hse.EviFluor.Device.html",
    "title": "Class Device | eviFluor",
    "summary": "Class Device Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll This class represents the eviFluor module. public class Device : IDisposable Inheritance object Device Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Device(string?) Initializes a new instance of the Device class. The constructor attempts to connect to an EviFluor module via a serial port. If no serial port is provided, it tries to auto-detect the device. Throws an exception if: No device is found during auto-detection. The provided serial port does not match the expected VID/PID for the EviFluor device. public Device(string? serialNumber = null) Parameters serialNumber string The serial number of the device to connect to. If null or empty, the constructor attempts to automatically find a device. Exceptions Exception Thrown when: No device is found during auto-detection (if serialNumber is null or empty). The provided serial port does not correspond to an EviFluor device. Properties LibraryVersion Returns the library version. public string LibraryVersion { get; } Property Value string Methods Autogain(int) Performs an auto-gain operation at the specified level. Sends a command to the device and parses the response to determine if the operation was successful. public AutoGainResult Autogain(int level) Parameters level int The gain level (0-2500) to be set on the device. Returns AutoGainResult An AutoGainResult indicating whether the gain was found and the LED power used. Baseline() Executes a baseline command. Actually no adjustment or measurement is performed. Only the internal measurement memory is deleted. public void Baseline() Command(string) Sends a command string to the device over the serial interface and waits for a valid response. public string[] Command(string tx) Parameters tx string The command string to transmit (without prefix or newline, e.g., \"V 1\"). Returns string[] A list of response string tokens received from the device after processing the command. Each token represents a space- or quote-delimited component of the response. Remarks This method prepends a ':' to the transmitted command, sends it via the serial port, then reads and validates the response. If an error is indicated by the device (response starting with \"E\"), a corresponding error message is thrown based on the error code. Exceptions Exception Thrown in the following cases: No response within the timeout period. Response does not start with ':' (invalid format). Response indicates an error code (e.g., unknown command, invalid parameter). Dispose() Close the serial port and dispose it. public void Dispose() ~Device() Destructor protected ~Device() FirmwareVersion() Retrieves the firmware version of the connected device. This method uses the Get<T>(Index) method to fetch the firmware version from the device at the predefined index for firmware versions. public string FirmwareVersion() Returns string The firmware version of the device as a string. Exceptions InvalidCastException Thrown if the retrieval or conversion of the firmware version fails. Exception Thrown if there is an issue communicating with the device or retrieving the value. FirstAirMeasurement() Performs the first air measurement by measuring at minimum and maximum LED power levels. public FirstAirMeasurementResult FirstAirMeasurement() Returns FirstAirMeasurementResult A FirstAirMeasurementResult containing the minimum and maximum measurements. FirstSampleMeasurement(double) Performs the first sample measurement using an auto-gain operation to determine the optimal LED power level. public FirstSampleMeasurementResult FirstSampleMeasurement(double factor = 0.8) Parameters factor double A scaling factor for determining the initial gain level. Returns FirstSampleMeasurementResult A FirstSampleMeasurementResult containing the auto-gain result and the measurement. FwUpdate(string) Performs a firmware update on the device. The method reads the firmware file, erases the existing firmware, writes the new firmware line by line, and then verifies its validity. If the update fails at any stage, an exception is thrown. public void FwUpdate(string filename) Parameters filename string The path to the firmware file that contains the new firmware image. Remarks The update process follows these steps: Read all lines from the specified firmware file. Erase the existing firmware using Hse.EviFluor.Device.erase(). Send each line of the new firmware to the device using the \"S {line}\" command. Verify the firmware using verify(); if verification fails, throw an exception. Reboot the device and close the serial port. Wait for 30 seconds to allow the device to restart. Reopen the serial port and clear its buffers. Verify the firmware again; if verification still passes, throw an exception indicating the update failed. Exceptions IOException Thrown if the firmware file cannot be read. Exception Thrown if the firmware update fails at any stage (e.g., verification fails before or after reboot). GetAvailableDevices() Retrieves a list of available eviFluor devices by scanning serial ports. public static List<string> GetAvailableDevices() Returns List<string> A list of serial numbers of available matching devices. Get<T>(Index) Retrieves a value from the device at the specified index and converts it to the desired type. Sends a command to the device to fetch the value and parses the response. public T Get<T>(Index index) Parameters index Index The index from which the value should be retrieved. Returns T The value retrieved from the device, converted to the specified type T. Type Parameters T The type to which the retrieved value will be converted. Exceptions InvalidCastException Thrown if the conversion to the specified type T fails. Exception Thrown if the device response is invalid or does not contain the expected data format. IsCuvetteHolderEmpty() Checks whether the cuvette holder is empty. public bool IsCuvetteHolderEmpty() Returns bool true if the cuvette holder is empty; otherwise, false. Exceptions FormatException Thrown if the response value from the device cannot be parsed as an integer. IndexOutOfRangeException Thrown if the device response does not contain the expected number of values. Logging() Sets the status led color. public List<string> Logging() Returns List<string> Exceptions IndexOutOfRangeException Thrown if the device response does not contain the expected number of values. Measure() Performs a measurement and retrieves data from the device. public SingleMeasurement Measure() Returns SingleMeasurement A SingleMeasurement object containing the measured data for all channels. Exceptions FormatException Thrown if any of the response values from the device cannot be parsed as integers. IndexOutOfRangeException Thrown if the device response does not contain the expected number of values. ProductionNumber() Retrieves the production number of the connected device. This method uses the Get<T>(Index) method to fetch the production number from the device at the predefined index. public string ProductionNumber() Returns string The production number of the device as a string. Exceptions Exception Thrown if there is an issue communicating with the device or retrieving the value. SelfTest() Performs a self-test on the device and retrieves the result. public SelfTestResult SelfTest() Returns SelfTestResult A SelfTestResult object containing the parsed self-test result. Exceptions FormatException Thrown if the response value from the device cannot be parsed as an integer. IndexOutOfRangeException Thrown if the device response does not contain the expected number of values. SerialNumber() Retrieves the serial number of the connected device. This method uses the Get<T>(Index) method to fetch the serial number from the device at the predefined index for serial numbers. public string SerialNumber() Returns string The serial number of the device as a string. Exceptions InvalidCastException Thrown if the retrieval or conversion of the serial number fails. Exception Thrown if there is an issue communicating with the device or retrieving the value. Set(Index, double) Sets a value on the device at the specified index. Sends a command to update the value on the device. public void Set(Index index, double value) Parameters index Index The index where the value should be set. value double The double value to set at the specified index. Set(Index, int) Sets a value on the device at the specified index. Sends a command to update the value on the device. public void Set(Index index, int value) Parameters index Index The index where the value should be set. value int The integer value to set at the specified index. Set(Index, string) Sets a value on the device at the specified index. Sends a command to update the value on the device. public void Set(Index index, string value) Parameters index Index The index where the value should be set. value string The string value to set at the specified index. SetStatusLed(StatusLedColor) Sets the status led color. public void SetStatusLed(StatusLedColor color) Parameters color StatusLedColor Exceptions IndexOutOfRangeException Thrown if the device response does not contain the expected number of values. TechnicalReport() Generates a technical report containing various diagnostic data from the device. The report includes levelling results, self-test data, serial number, and firmware version. public JsonNode TechnicalReport() Returns JsonNode A JsonNode object containing structured diagnostic data. Remarks The generated report consists of the following fields: SELFTEST: The base self-test results in JSON format. SERIALNUMBER: The device's serial number. FIRMWAREVERSION: The firmware version currently installed on the device. PRODUCTIONNUMBER: The device's production number. ToString() Returns a string representation of the device, including its serial port, serial number, and firmware version. public override string ToString() Returns string A formatted string containing the device's port name, serial number, and firmware version. Remarks The returned string follows the format: \"eviFluor Module@{PortName} SN:{SerialNumber} Version:{FirmwareVersion}\" Example output: \"eviFluor Module@COM3 SN:12345678 Version:1.0.5\" verify() Verifies if the 2nd firmware image is valid. public bool verify() Returns bool true if the verification was successful; otherwise, false. Exceptions FormatException Thrown if the response value from the device cannot be parsed as an integer. IndexOutOfRangeException Thrown if the device response does not contain the expected number of values."
  },
  "api/Hse.EviFluor.Dict.html": {
    "href": "api/Hse.EviFluor.Dict.html",
    "title": "Class Dict | eviFluor",
    "summary": "Class Dict Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Defines constant dictionary keys used in measurement processing. public class Dict Inheritance object Dict Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AIR JSON key 'air'. public const string AIR = \"air\" Field Value string COMMENT JSON key 'comment'. public const string COMMENT = \"comment\" Field Value string CONCENTRATION JSON key 'concentration'. public const string CONCENTRATION = \"concentration\" Field Value string DARK JSON key 'dark'. public const string DARK = \"dark\" Field Value string FIRMWAREVERSION JSON key 'firmwareVersion'. public const string FIRMWAREVERSION = \"firmwareVersion\" Field Value string LED_POWER JSON key 'ledPower'. public const string LED_POWER = \"ledPower\" Field Value string LOGGING JSON key 'logging'. public const string LOGGING = \"logging\" Field Value string MAX_MEASUREMENT JSON key 'max_measurement'. public const string MAX_MEASUREMENT = \"max_measurement\" Field Value string MEASURE JSON key 'measure'. public const string MEASURE = \"measure\" Field Value string MEASUREMENTS JSON key 'measurements'. public const string MEASUREMENTS = \"measurements\" Field Value string MIN_MEASUREMENT JSON key 'min_measurement'. public const string MIN_MEASUREMENT = \"min_measurement\" Field Value string PRODUCTIONNUMBER JSON key 'productionnumber'. public const string PRODUCTIONNUMBER = \"productionnumber\" Field Value string RESULTS JSON key 'results'. public const string RESULTS = \"results\" Field Value string SAMPLE JSON key 'sample'. public const string SAMPLE = \"sample\" Field Value string SELFTEST JSON key 'selftest'. public const string SELFTEST = \"selftest\" Field Value string SELFTEST_COMUNICATION_ERROR JSON key 'comunicationerror'. public const string SELFTEST_COMUNICATION_ERROR = \"comunicationerror\" Field Value string SELFTEST_RESULT JSON key 'result'. public const string SELFTEST_RESULT = \"result\" Field Value string SERIALNUMBER JSON key 'serialnumber'. public const string SERIALNUMBER = \"serialnumber\" Field Value string VALID JSON key 'valid'. public const string VALID = \"valid\" Field Value string VALUE JSON key 'value'. public const string VALUE = \"value\" Field Value string VALUES JSON key 'values'. public const string VALUES = \"values\" Field Value string"
  },
  "api/Hse.EviFluor.Error.html": {
    "href": "api/Hse.EviFluor.Error.html",
    "title": "Enum Error | eviFluor",
    "summary": "Enum Error Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Enumeration representing various error codes. public enum Error Fields INVALID_PARAMETER = 2 Invalid parameter. OK = 0 No error. SREC_FLASH_WRITE_ERROR = 4 Flash write error. SREC_INVALID_CRC = 6 Invalid SREC crc. SREC_INVALID_STRING = 7 Invalid SREC string. SREC_UNSUPPORTED_TYPE = 5 Unsupported SREC type. UNKNOWN_COMMAND = 1 Unknown command."
  },
  "api/Hse.EviFluor.Factors.html": {
    "href": "api/Hse.EviFluor.Factors.html",
    "title": "Class Factors | eviFluor",
    "summary": "Class Factors Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents standardization factors with low and high values. public class Factors Inheritance object Factors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Factors(Point, Point) Initializes a new instance of the Factors class. public Factors(Point stdLow, Point stdHigh) Parameters stdLow Point The low standard factor. stdHigh Point The high standard factor. Properties StdHigh Gets or sets the high standard factor. public Point StdHigh { get; set; } Property Value Point StdLow Gets or sets the low standard factor. public Point StdLow { get; set; } Property Value Point Methods ToString() Returns a string representation of the standardization factors. public override string ToString() Returns string A formatted string displaying the low and high standard factors."
  },
  "api/Hse.EviFluor.FirstAirMeasurementResult.html": {
    "href": "api/Hse.EviFluor.FirstAirMeasurementResult.html",
    "title": "Class FirstAirMeasurementResult | eviFluor",
    "summary": "Class FirstAirMeasurementResult Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents the result of the first air measurement, containing the minimum and maximum recorded measurements. public class FirstAirMeasurementResult Inheritance object FirstAirMeasurementResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FirstAirMeasurementResult(SingleMeasurement, SingleMeasurement) Initializes a new instance of the FirstAirMeasurementResult class. public FirstAirMeasurementResult(SingleMeasurement minMeasurement, SingleMeasurement maxMeasurement) Parameters minMeasurement SingleMeasurement The minimum recorded measurement. maxMeasurement SingleMeasurement The maximum recorded measurement. Properties MaxMeasurement The maximum recorded measurement. public SingleMeasurement MaxMeasurement { get; set; } Property Value SingleMeasurement MinMeasurement The minimum recorded measurement. public SingleMeasurement MinMeasurement { get; set; } Property Value SingleMeasurement Methods AdjustToLedPower(int) Adjusts the measurement to a given LED power level using linear interpolation. public SingleMeasurement AdjustToLedPower(int ledPower) Parameters ledPower int The target LED power level. Returns SingleMeasurement A new SingleMeasurement adjusted to the specified LED power. ToJson() Converts the FirstAirMeasurementResult values to a JSON representation. public JsonNode ToJson() Returns JsonNode A JsonNode representing the channel values. ToString() Returns a string representation of the first air measurement result. public override string ToString() Returns string A formatted string displaying the min and max measurements."
  },
  "api/Hse.EviFluor.FirstSampleMeasurementResult.html": {
    "href": "api/Hse.EviFluor.FirstSampleMeasurementResult.html",
    "title": "Class FirstSampleMeasurementResult | eviFluor",
    "summary": "Class FirstSampleMeasurementResult Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents the result of the first sample measurement, containing auto-gain results and the measurement itself. public class FirstSampleMeasurementResult Inheritance object FirstSampleMeasurementResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FirstSampleMeasurementResult(AutoGainResult, SingleMeasurement) Initializes a new instance of the FirstSampleMeasurementResult class. public FirstSampleMeasurementResult(AutoGainResult autoGainResult, SingleMeasurement measurement) Parameters autoGainResult AutoGainResult The auto-gain result of the sample measurement. measurement SingleMeasurement The recorded sample measurement. Properties AutoGainResult The auto-gain result of the sample measurement. public AutoGainResult AutoGainResult { get; set; } Property Value AutoGainResult Measurement The recorded sample measurement. public SingleMeasurement Measurement { get; set; } Property Value SingleMeasurement Methods ToString() Returns a string representation of the first sample measurement result. public override string ToString() Returns string A formatted string displaying the auto-gain result and the measurement."
  },
  "api/Hse.EviFluor.IJsonSerializable.html": {
    "href": "api/Hse.EviFluor.IJsonSerializable.html",
    "title": "Interface IJsonSerializable | eviFluor",
    "summary": "Interface IJsonSerializable Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Defines a contract for types that can serialize themselves to a JsonNode. public interface IJsonSerializable Remarks This interface is used by the Verification.Entry class to convert associated data into a standardized JSON format for reporting, logging, or storage. Methods ToJson() Converts the current instance to a JSON-serializable JsonNode structure. JsonNode ToJson() Returns JsonNode A JsonNode that represents the current object."
  },
  "api/Hse.EviFluor.IKit.html": {
    "href": "api/Hse.EviFluor.IKit.html",
    "title": "Interface IKit | eviFluor",
    "summary": "Interface IKit Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Interface for implementing calibration fitting algorithms. public interface IKit Methods fit(Point, Point, double) Performs a calibration fit using two standard reference points. double fit(Point stdLow, Point stdHigh, double value) Parameters stdLow Point Low concentration standard point. stdHigh Point High concentration standard point. value double The raw measured value to convert. Returns double Calculated concentration based on interpolation."
  },
  "api/Hse.EviFluor.Index.html": {
    "href": "api/Hse.EviFluor.Index.html",
    "title": "Enum Index | eviFluor",
    "summary": "Enum Index Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Enumeration representing different index values for hardware configurations. public enum Index Fields AUTOGAIN_DELTA = 11 Index for autogain delta. CURRENT_LED470_POWER = 15 Index for current led power (470 nm). CURRENT_LED470_POWER_MAX = 17 Index for maximum led power (470 nm). CURRENT_LED470_POWER_MIN = 16 Index for minimal led power (470 nm). CURRENT_LED625_POWER = 18 Index for current led power (625 nm). CURRENT_LED625_POWER_MAX = 20 Index for maximum led power (625 nm). CURRENT_LED625_POWER_MIN = 19 Index for minimal led power (625 nm). CUVETTE_EMPTY_DELTA = 12 Index for empty delta. CUVETTE_EMPTY_LED_POWER = 14 Index for empty cuvette guide led power. LAST_MEASUREMENT_COUNT = 10 Index for last measurement count. PRODUCTIONNUMBER = 3 Index for production number. SERIALNUMBER = 1 Index for serial number. VERSION = 0 Index for version."
  },
  "api/Hse.EviFluor.Kits.Default.html": {
    "href": "api/Hse.EviFluor.Kits.Default.html",
    "title": "Class Default | eviFluor",
    "summary": "Class Default Namespace Hse.EviFluor.Kits Assembly Hseagcom.EviFluor.dll Default implementation of the IKit interface using linear interpolation. public class Default : IKit Inheritance object Default Implements IKit Derived Quant_iT_dsDNA_HS Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Default() Initializes a new instance of the Default class. public Default() Methods ToString() Returns a textual description of the default kit. public override string ToString() Returns string Kit description string. fit(Point, Point, double) Performs a calibration fit using two standard reference points. public double fit(Point stdLow, Point stdHigh, double value) Parameters stdLow Point Low concentration standard point. stdHigh Point High concentration standard point. value double The raw measured value to convert. Returns double Calculated concentration based on interpolation."
  },
  "api/Hse.EviFluor.Kits.Quant_iT_dsDNA_HS.html": {
    "href": "api/Hse.EviFluor.Kits.Quant_iT_dsDNA_HS.html",
    "title": "Class Quant_iT_dsDNA_HS | eviFluor",
    "summary": "Class Quant_iT_dsDNA_HS Namespace Hse.EviFluor.Kits Assembly Hseagcom.EviFluor.dll Specific implementation of the Quant-iT dsDNA High Sensitivity Assay Kit. public class Quant_iT_dsDNA_HS : Default, IKit Inheritance object Default Quant_iT_dsDNA_HS Implements IKit Inherited Members Default.fit(Point, Point, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Quant_iT_dsDNA_HS() Initializes a new instance of the Quant_iT_dsDNA_HS class. public Quant_iT_dsDNA_HS() Methods ToString() Returns a textual description of this specific kit. public override string ToString() Returns string Kit description string."
  },
  "api/Hse.EviFluor.Kits.html": {
    "href": "api/Hse.EviFluor.Kits.html",
    "title": "Namespace Hse.EviFluor.Kits | eviFluor",
    "summary": "Namespace Hse.EviFluor.Kits Classes Default Default implementation of the IKit interface using linear interpolation. Quant_iT_dsDNA_HS Specific implementation of the Quant-iT dsDNA High Sensitivity Assay Kit."
  },
  "api/Hse.EviFluor.Measurement.html": {
    "href": "api/Hse.EviFluor.Measurement.html",
    "title": "Class Measurement | eviFluor",
    "summary": "Class Measurement Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents a measurement containing baseline, air, and sample values, along with optional comments. public class Measurement Inheritance object Measurement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Measurement(FirstAirMeasurementResult, FirstSampleMeasurementResult, string) Initializes a new instance of the Measurement class. public Measurement(FirstAirMeasurementResult air, FirstSampleMeasurementResult sample, string comment = \"\") Parameters air FirstAirMeasurementResult The air measurement. sample FirstSampleMeasurementResult The sample measurement. comment string An optional comment for the measurement. Measurement(SingleMeasurement, SingleMeasurement, string) Initializes a new instance of the Measurement class. public Measurement(SingleMeasurement air, SingleMeasurement sample, string comment = \"\") Parameters air SingleMeasurement The air measurement. sample SingleMeasurement The sample measurement. comment string An optional comment for the measurement. Fields air The air reference measurement used for background correction. public SingleMeasurement air Field Value SingleMeasurement comment Optional comment associated with the measurement, such as notes or labels. public string comment Field Value string sample The actual sample measurement. public SingleMeasurement sample Field Value SingleMeasurement Methods CalculateFactors(double, double, Measurement, Measurement) Calculates the correction factors based on known standard concentrations and corresponding measurements. public static Factors CalculateFactors(double concentrationLow, double concentrationHigh, Measurement measurementStdLow, Measurement measurementStdHigh) Parameters concentrationLow double The known low concentration standard. concentrationHigh double The known high concentration standard. measurementStdLow Measurement The measurement corresponding to the low concentration. measurementStdHigh Measurement The measurement corresponding to the high concentration. Returns Factors A Factors object containing calculated correction factors. CalculateFactors(double, double, List<Measurement>, List<Measurement>) Calculates correction factors using multiple measurements for each concentration level. public static Factors CalculateFactors(double concentrationLow, double concentrationHigh, List<Measurement> measurementsStdLow, List<Measurement> measurementsStdHigh) Parameters concentrationLow double The known low concentration standard. concentrationHigh double The known high concentration standard. measurementsStdLow List<Measurement> A list of measurements corresponding to the low concentration. measurementsStdHigh List<Measurement> A list of measurements corresponding to the high concentration. Returns Factors A Factors object containing calculated correction factors. Comment() Gets the comment associated with the measurement. public string Comment() Returns string The comment text. Concentration(Factors, IKit?) Calculates the concentration using the given factors and kit. public double Concentration(Factors factors, IKit? kit = null) Parameters factors Factors Correction factors for the measurement. kit IKit Optional kit for concentration fitting (e.g., linear interpolation). Returns double The calculated concentration value. FromJson(JsonNode?) Creates a Measurement instance from a JSON representation. public static Measurement FromJson(JsonNode? node) Parameters node JsonNode The JSON node containing the measurement data. Returns Measurement A Measurement object populated from JSON data. Exceptions ArgumentNullException Thrown if the provided JSON node is null. InvalidOperationException Thrown if required fields are missing. GetResults(Factors, IKit?) Computes the measurement results using the provided factors and kit. public Results GetResults(Factors factors, IKit? kit = null) Parameters factors Factors Factors used for calibration or adjustment. kit IKit Optional kit to use for fitting measured data. Returns Results A Results object with computed values. SetComment(string) Sets the comment for the measurement. public void SetComment(string comment) Parameters comment string The comment text. ToJson() Converts the measurement to a JSON representation. public JsonNode ToJson() Returns JsonNode A JSON node representing the measurement. ToString() Returns a string representation of the measurement. public override string ToString() Returns string A formatted string displaying baseline, air, and sample measurements. Value() Returns the difference between air- and sample measurement. public double Value() Returns double Difference between air- and sample measurement."
  },
  "api/Hse.EviFluor.Point.html": {
    "href": "api/Hse.EviFluor.Point.html",
    "title": "Class Point | eviFluor",
    "summary": "Class Point Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents a data point with a concentration and corresponding value. public class Point Inheritance object Point Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Point(double, double) Initializes a new instance of the Point class with specified concentration and value. public Point(double concentration, double value) Parameters concentration double value double Properties Concentration Gets or sets the concentration value. public double Concentration { get; set; } Property Value double Value Gets or sets the measured value. public double Value { get; set; } Property Value double Methods ToString() Returns a string representation of the data point. public override string ToString() Returns string A formatted string displaying the concentration and value."
  },
  "api/Hse.EviFluor.Results.html": {
    "href": "api/Hse.EviFluor.Results.html",
    "title": "Class Results | eviFluor",
    "summary": "Class Results Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents the results the concentration measurement. public class Results : IEquatable<Results> Inheritance object Results Implements IEquatable<Results> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Results(double) Initializes a new instance of the Results class with specified concentration. public Results(double concentration) Parameters concentration double The unit of the concentration depends on the used standard high. Properties Concentration Gets or sets the concentration. The unit of the concentration depends on the used standard high. public double Concentration { get; set; } Property Value double Methods Equals(Results?) Determines whether the specified object is equal to the current instance. public bool Equals(Results? other) Parameters other Results The object to compare with the current instance. Returns bool true if the objects are equal; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current instance. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if the objects are equal; otherwise, false. FromJson(JsonNode?) Creates a Results instance from a JSON representation. public static Results FromJson(JsonNode? node) Parameters node JsonNode The JSON node containing the nucleic acid data. Returns Results A Results object populated from the JSON data. Exceptions ArgumentNullException Thrown if the provided JSON node is null. InvalidOperationException Thrown if required fields are missing or null. GetHashCode() Returns a hash code for the current Measurement instance. public override int GetHashCode() Returns int An integer hash code based on the air and sample measurements, as well as the optional comment. Remarks This override ensures that instances with the same measurement data produce the same hash code, which is particularly important when using this class in hash-based collections like dictionaries or hash sets. ToJson() Converts the current instance to a JSON representation. public JsonNode ToJson() Returns JsonNode A JsonNode representing the current object. ToString() Returns a string representation of the results. public override string ToString() Returns string A formatted string with the concentration"
  },
  "api/Hse.EviFluor.SelfTestResult.html": {
    "href": "api/Hse.EviFluor.SelfTestResult.html",
    "title": "Class SelfTestResult | eviFluor",
    "summary": "Class SelfTestResult Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents the result of a self-test, containing various checks and problem indicators. public class SelfTestResult Inheritance object SelfTestResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SelfTestResult(int) Initializes a new instance of the SelfTestResult class. public SelfTestResult(int result) Parameters result int The result of the self-test. Properties Result Gets or sets the integer result of the self-test. public int Result { get; set; } Property Value int Methods HasProblemWithCommunication() Checks if there is a problem with the communication. public bool HasProblemWithCommunication() Returns bool HasProblems() Determines whether there are any problems in the self-test. public bool HasProblems() Returns bool True if there are problems; otherwise, false. ToJson() Converts the self-test result to a JSON representation. public JsonNode ToJson() Returns JsonNode A JsonNode representing the self-test result."
  },
  "api/Hse.EviFluor.Selftest.html": {
    "href": "api/Hse.EviFluor.Selftest.html",
    "title": "Enum Selftest | eviFluor",
    "summary": "Enum Selftest Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Flags enumeration for self-test components. [Flags] public enum Selftest Fields COMUNICATION_ERROR = 1 Indicates a communication error."
  },
  "api/Hse.EviFluor.SingleMeasurement.html": {
    "href": "api/Hse.EviFluor.SingleMeasurement.html",
    "title": "Class SingleMeasurement | eviFluor",
    "summary": "Class SingleMeasurement Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents a single measurement consisting the 470 nm wavelength channel. public class SingleMeasurement Inheritance object SingleMeasurement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SingleMeasurement(Channel?) Initializes a new instance of the SingleMeasurement class with optional channels. public SingleMeasurement(Channel? channel470 = null) Parameters channel470 Channel The channel for 470 nm (default: new Channel()). Properties Channel470 Gets or sets the channel for 470 nm measurements. public Channel Channel470 { get; set; } Property Value Channel Methods Delta() Returns the difference between sample and dark.self-> public double Delta() Returns double Difference between sample and dark FromJson(JsonNode) Creates a SingleMeasurement instance from a JSON node. public static SingleMeasurement FromJson(JsonNode node) Parameters node JsonNode The JSON node containing measurement data. Returns SingleMeasurement A new SingleMeasurement instance. Exceptions ArgumentNullException Thrown if the JSON node is null or missing required properties. ToJson() Converts the measurement data to a JSON representation. public JsonNode ToJson() Returns JsonNode A JsonNode representing the measurement. ToString() Returns a string representation of the measurement values. public override string ToString() Returns string A formatted string containing all channel values."
  },
  "api/Hse.EviFluor.StatusLedColor.html": {
    "href": "api/Hse.EviFluor.StatusLedColor.html",
    "title": "Enum StatusLedColor | eviFluor",
    "summary": "Enum StatusLedColor Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Enumeration representing different status led colors . public enum StatusLedColor Fields BLUE = 3 Status LED blue. GREEN = 2 Status LED green. OFF = 0 Status LED off. RED = 1 Status LED red. WHITE = 4 Status LED white."
  },
  "api/Hse.EviFluor.StorageMeasurement.html": {
    "href": "api/Hse.EviFluor.StorageMeasurement.html",
    "title": "Class StorageMeasurement | eviFluor",
    "summary": "Class StorageMeasurement Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Handles storage and retrieval of measurements using JSON serialization. public class StorageMeasurement Inheritance object StorageMeasurement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StorageMeasurement(string) Initializes a new instance of the StorageMeasurement class, optionally loading from a file. public StorageMeasurement(string filename = \"\") Parameters filename string Optional filename to load measurements from. Properties Count Gets the number of stored measurements. public int Count { get; } Property Value int this[int] Gets the StorageMeasurementEntry at the specified index. public StorageMeasurementEntry this[int index] { get; } Parameters index int The zero-based index of the measurement entry to retrieve. Property Value StorageMeasurementEntry The StorageMeasurementEntry located at the given index in the measurement list. Exceptions ArgumentOutOfRangeException Thrown when index is less than 0 or greater than or equal to the number of stored entries. data Raw JSON structure representing all stored measurement data. This node may contain measurements, results, metadata, logging, and other associated entries. public JsonNode data { get; } Property Value JsonNode Methods Append(Measurement, string, List<string>?) Appends a measurement to storage. public void Append(Measurement measurement, string comment = \"\", List<string>? logging = null) Parameters measurement Measurement The measurement to append. comment string An optional comment for the measurement. logging List<string> Optional logging information. AppendWithResults(Measurement, Results, string, List<string>?) Appends a measurement and the results to storage. public void AppendWithResults(Measurement measurement, Results results, string comment = \"\", List<string>? logging = null) Parameters measurement Measurement The measurement to append. results Results The results to append. comment string An optional comment for the measurement. logging List<string> Optional logging information. Measurements() Retrieves the list of stored measurements. public List<Measurement> Measurements() Returns List<Measurement> A list of Measurement objects. Results() Retrieves the list of stored results. public List<Results> Results() Returns List<Results> A list of Measurement objects. Save(string) Saves the measurement data to a specified file. public void Save(string filename) Parameters filename string The filename to save data to."
  },
  "api/Hse.EviFluor.StorageMeasurementEntry.html": {
    "href": "api/Hse.EviFluor.StorageMeasurementEntry.html",
    "title": "Class StorageMeasurementEntry | eviFluor",
    "summary": "Class StorageMeasurementEntry Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents an entry in the storage measurement system. Contains a measurement, an optional comment, results, and raw JSON data. public class StorageMeasurementEntry Inheritance object StorageMeasurementEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StorageMeasurementEntry(Measurement, string?, Results?, JsonNode?) Initializes a new instance of the StorageMeasurementEntry class. public StorageMeasurementEntry(Measurement measurement, string? comment = null, Results? results = null, JsonNode? node = null) Parameters measurement Measurement The measurement data. comment string An optional comment. results Results The associated results, if available. node JsonNode The raw JSON node, if available. Properties Comment An optional comment associated with the measurement entry. public string? Comment { get; set; } Property Value string Measurement The stored measurement data. public Measurement Measurement { get; set; } Property Value Measurement Node The raw JSON node representation of the measurement entry. public JsonNode? Node { get; set; } Property Value JsonNode Results The calculated results associated with the measurement, if available. public Results? Results { get; set; } Property Value Results Methods ApplyResults(Factors) Applies the calculated results based on given correction factors. Updates the JSON node representation if available. public void ApplyResults(Factors factors) Parameters factors Factors The correction factors to apply. FromJson(JsonNode) Creates a StorageMeasurementEntry instance from a JSON node. Parses the measurement, comment, and results data. public static StorageMeasurementEntry FromJson(JsonNode node) Parameters node JsonNode The JSON node containing the measurement entry data. Returns StorageMeasurementEntry A populated StorageMeasurementEntry instance. HasResults() Determines whether the entry contains calculated results. public bool HasResults() Returns bool true if results exist, otherwise false. ToString() Returns a string representation of the storage measurement entry. public override string ToString() Returns string A formatted string displaying measurement details."
  },
  "api/Hse.EviFluor.TypeOf.html": {
    "href": "api/Hse.EviFluor.TypeOf.html",
    "title": "Enum TypeOf | eviFluor",
    "summary": "Enum TypeOf Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Enumeration representing different data types. public enum TypeOf Fields DOUBLE = 2 Double type STRING = 0 String type UINT32 = 1 Uint32 type"
  },
  "api/Hse.EviFluor.USB.html": {
    "href": "api/Hse.EviFluor.USB.html",
    "title": "Class USB | eviFluor",
    "summary": "Class USB Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Provides USB-related constants. public static class USB Inheritance object USB Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PID Product ID (PID) of the USB device. public const int PID = 3 Field Value int VID Vendor ID (VID) of the USB device. public const int VID = 7358 Field Value int"
  },
  "api/Hse.EviFluor.Verification.Entry.html": {
    "href": "api/Hse.EviFluor.Verification.Entry.html",
    "title": "Class Verification.Entry | eviFluor",
    "summary": "Class Verification.Entry Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Represents a single verification result entry within the Verification process. public class Verification.Entry Inheritance object Verification.Entry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Each entry consists of a Verification.ProblemId indicating the type of problem detected, and an associated data object (e.g., a measurement or result) that caused the issue. Constructors Entry(ProblemId, object) Initializes a new instance of the Verification.Entry class. public Entry(Verification.ProblemId problem, object data) Parameters problem Verification.ProblemId The specific problem identifier. data object The data related to the problem, such as a measurement. Properties Data Gets the data object associated with the problem (e.g., a measurement or result). public object Data { get; } Property Value object Problem Gets the problem type that this entry represents. public Verification.ProblemId Problem { get; } Property Value Verification.ProblemId Methods ToJson() Converts this entry into a JSON object containing the problem ID, its name, and the serialized data (if available). public JsonNode ToJson() Returns JsonNode A JsonNode representing the verification entry. ToString() Returns a string that represents the current verification entry. public override string ToString() Returns string A string describing the problem type and the associated data."
  },
  "api/Hse.EviFluor.Verification.Hints.html": {
    "href": "api/Hse.EviFluor.Verification.Hints.html",
    "title": "Enum Verification.Hints | eviFluor",
    "summary": "Enum Verification.Hints Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Flags that provide context-sensitive hints for verification checks. [Flags] public enum Verification.Hints Fields MUST_HAVE_CUVETTE = 1 A cuvette is expected. NONE = 0 No hint. STD_HIGH = 2 Signal for standard high (~2000 +- 200 mV) expected."
  },
  "api/Hse.EviFluor.Verification.ProblemId.html": {
    "href": "api/Hse.EviFluor.Verification.ProblemId.html",
    "title": "Enum Verification.ProblemId | eviFluor",
    "summary": "Enum Verification.ProblemId Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Enum representing various types of problems that may occur during verification. public enum Verification.ProblemId Fields AUTO_GAIN_RESULT = 5 Auto gain function failed. CUVETTE_MISSING = 2 A cuvette was expected. SATURATION = 1 Indicates that the sensor signal saturated. WRONG_LEVEL = 6 The signal level is not in the expected range (1700 - 2300 mV)"
  },
  "api/Hse.EviFluor.Verification.html": {
    "href": "api/Hse.EviFluor.Verification.html",
    "title": "Class Verification | eviFluor",
    "summary": "Class Verification Namespace Hse.EviFluor Assembly Hseagcom.EviFluor.dll Provides verification checks for various measurement types and conditions. public class Verification Inheritance object Verification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Entries List of all detected problems. public List<Verification.Entry> Entries { get; } Property Value List<Verification.Entry> Methods Check(AutoGainResult, Hints) Checks the result of an auto-gain operation. public bool Check(AutoGainResult autoGainResult, Verification.Hints hints = Hints.NONE) Parameters autoGainResult AutoGainResult hints Verification.Hints Returns bool Check(FirstAirMeasurementResult, Hints) Checks the validity of a first air measurement result. public bool Check(FirstAirMeasurementResult fam, Verification.Hints hints = Hints.NONE) Parameters fam FirstAirMeasurementResult hints Verification.Hints Returns bool Check(FirstSampleMeasurementResult, Hints) Checks the validity of a first sample measurement result. public bool Check(FirstSampleMeasurementResult fsm, Verification.Hints hints = Hints.NONE) Parameters fsm FirstSampleMeasurementResult hints Verification.Hints Returns bool Check(Measurement, Hints) Checks the validity of a full measurement (air and sample). public bool Check(Measurement m, Verification.Hints hints = Hints.NONE) Parameters m Measurement hints Verification.Hints Returns bool Check(SingleMeasurement, Hints) Checks the validity of a single measurement based on saturation and expected behavior. public bool Check(SingleMeasurement sm, Verification.Hints hints = Hints.NONE) Parameters sm SingleMeasurement hints Verification.Hints Returns bool Check(object, Hints) Generic check dispatcher that routes different types to the appropriate check method. public bool Check(object obj, Verification.Hints hints = Hints.NONE) Parameters obj object hints Verification.Hints Returns bool Failed() Indicates whether the verification encountered one or more issues. public bool Failed() Returns bool HasProblem(ProblemId) Checks if a specific problem has been detected. public bool HasProblem(Verification.ProblemId id) Parameters id Verification.ProblemId Returns bool Success() Indicates whether the verification passed without any issues. public bool Success() Returns bool ToJson() Converts all entries to a JSON array. public JsonArray ToJson() Returns JsonArray ToString() Provides string representation of all entries. public override string ToString() Returns string"
  },
  "api/Hse.EviFluor.html": {
    "href": "api/Hse.EviFluor.html",
    "title": "Namespace Hse.EviFluor | eviFluor",
    "summary": "Namespace Hse.EviFluor Classes AutoGainResult Represents the result of an automatic gain adjustment operation. Channel Represents a measurement channel with sample and reference values, measured in mV. Device This class represents the eviFluor module. Dict Defines constant dictionary keys used in measurement processing. Factors Represents standardization factors with low and high values. FirstAirMeasurementResult Represents the result of the first air measurement, containing the minimum and maximum recorded measurements. FirstSampleMeasurementResult Represents the result of the first sample measurement, containing auto-gain results and the measurement itself. Measurement Represents a measurement containing baseline, air, and sample values, along with optional comments. Point Represents a data point with a concentration and corresponding value. Results Represents the results the concentration measurement. SelfTestResult Represents the result of a self-test, containing various checks and problem indicators. SingleMeasurement Represents a single measurement consisting the 470 nm wavelength channel. StorageMeasurement Handles storage and retrieval of measurements using JSON serialization. StorageMeasurementEntry Represents an entry in the storage measurement system. Contains a measurement, an optional comment, results, and raw JSON data. USB Provides USB-related constants. Verification Provides verification checks for various measurement types and conditions. Verification.Entry Represents a single verification result entry within the Verification process. Interfaces IJsonSerializable Defines a contract for types that can serialize themselves to a JsonNode. IKit Interface for implementing calibration fitting algorithms. Enums Error Enumeration representing various error codes. Index Enumeration representing different index values for hardware configurations. Selftest Flags enumeration for self-test components. StatusLedColor Enumeration representing different status led colors . TypeOf Enumeration representing different data types. Verification.Hints Flags that provide context-sensitive hints for verification checks. Verification.ProblemId Enum representing various types of problems that may occur during verification."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "| eviFluor",
    "summary": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "| eviFluor",
    "summary": "The C# API documentation can be found here."
  }
}